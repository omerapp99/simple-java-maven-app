name: CI/CD Pipeline

on:
  push:
    branches:
      - master

jobs:
  versioning:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensures full git history for versioning

      # Set up Java JDK 17
      - name: Set up Java JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'maven'

      # Increment Version and Build
      - name: Increment Version and Build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Fetch current version
          current_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          
          # Increment version (increment last digit)
          IFS='.' read -ra VERSION_PARTS <<< "$current_version"
          last_index=$((${#VERSION_PARTS[@]} - 1))
          VERSION_PARTS[last_index]=$((VERSION_PARTS[last_index] + 1))
          
          # Reconstruct version
          new_version=$(IFS='.'; echo "${VERSION_PARTS[*]}")
          
          # Set and commit new version
          mvn versions:set -DnewVersion=$new_version
          mvn versions:commit
          
          # Build the project
          mvn clean package -DskipTests
          
          # Configure git
          git config user.name "GitHub Actions Bot"
          git config user.email "<>"
          
          # Commit and push version change
          git add pom.xml
          git commit -m "Bump version to $new_version"
          git push

  build:
    runs-on: ubuntu-latest
    needs: versioning
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Set up Docker Buildx for improved build performance
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      # Login to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Build and Push Docker Image
      - name: Build and Push Docker Image
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          # Generate unique tags
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Build image with multiple tags
          docker build \
            -t $DOCKER_USERNAME/simple-java-maven-app:$SHORT_SHA \
            -t $DOCKER_USERNAME/simple-java-maven-app:latest \
            .
          
          # Push both tags
          docker push $DOCKER_USERNAME/simple-java-maven-app:$SHORT_SHA
          docker push $DOCKER_USERNAME/simple-java-maven-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Prepare deployment environment
      - name: Prepare Deployment
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        run: |
          # Generate short SHA
          SHORT_SHA=$(git rev-parse --short HEAD)
          
          # Create docker-compose.yml dynamically
          cat << EOF > docker-compose.yml
          version: '3.8'
          services:
            app:
              image: $DOCKER_USERNAME/simple-java-maven-app:$SHORT_SHA
              ports:
                - "8080:8080"
              restart: unless-stopped
          EOF

      # Install Docker and Docker Compose
      - name: Install Docker and Docker Compose
        run: |
          # Install Docker
          curl -fsSL https://get.docker.com | sudo bash

          # Install Docker Compose
          DOCKER_COMPOSE_VERSION=$(curl -s https://api.github.com/repos/docker/compose/releases/latest | jq -r .name)
          sudo curl -L "https://github.com/docker/compose/releases/download/$DOCKER_COMPOSE_VERSION/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      # Log in to Docker Hub
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Deploy Docker image
      - name: Deploy Docker Image
        run: |
          # Pull latest images
          docker-compose pull
          
          # Start containers
          docker-compose up -d